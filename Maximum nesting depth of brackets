//approach 1

import java.util.Stack;

public class Solution {
    public static int maxDepth(String s) {
        int cnt = 0;
        Stack<String> st = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                st.push("(");
            } else if (s.charAt(i) == ')' && !st.isEmpty() && st.peek().equals("(")) {
                st.pop();
                cnt++;
            }
        }

        return cnt;
    }
}


//approach 2

import java.util.Stack;

public class Solution {
    public static int maxDepth(String s) {
        int cnt = 0;
        int maxDepth = 0; 
        Stack<Character> st = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                st.push('(');
                cnt++; 
                maxDepth = Math.max(maxDepth, cnt); 
            } else if (s.charAt(i) == ')' && !st.isEmpty() && st.peek() == '(') {
                st.pop();
                cnt--; 
            }
        }

        return maxDepth;
    }
}
