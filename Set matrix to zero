//brute force 

import java.util.* ;
import java.io.*; 
public class Solution {
    public static ArrayList<ArrayList<Integer>> zeroMatrix(ArrayList<ArrayList<Integer>> matrix, Integer n, Integer m) {
    	// Write your code here.

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix.get(i).get(j)==0)
                {
                    markRow(matrix,n,m,i);
                    markCol(matrix,n,m,j);
                }
            }
        }


        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix.get(i).get(j)==-1)
                {
                    matrix.get(i).set(j, 0);
                }
            }
        }
return matrix;
    }

    static void markRow(ArrayList<ArrayList<Integer>> matrix, Integer n, Integer m,int i)
    {
        for(int j=0;j<m;j++)
        {
            if(matrix.get(i).get(j)!=0)
            {
                matrix.get(i).set(j, -1);
            }
        }
    }

        static void markCol(ArrayList<ArrayList<Integer>> matrix, Integer n, Integer m,int j)
    {
        for(int i=0;i<n;i++)
        {
            if(matrix.get(i).get(j)!=0)
            {
                matrix.get(i).set(j, -1);
            }
        }
    }
}


//optimal approach

import java.util.* ;
import java.io.*; 
public class Solution {
    public static ArrayList<ArrayList<Integer>> zeroMatrix(ArrayList<ArrayList<Integer>> matrix, Integer n, Integer m) {
    	// Write your code here.
        int col[]=new int [m];
        int row[]=new int[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix.get(i).get(j)==0)
                {
                    row[i]=1;
                    col[j]=1;
                }
            }
        }


        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(row[i]==1 ||col[j]==1)
                {
                    matrix.get(i).set(j, 0);
                }
            }
        }

     return   matrix;
    }
}
