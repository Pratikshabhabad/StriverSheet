//brute force 

public class Solution {
    public static int longestSubarrayWithSumK(int[] a, long k) {
        int len = 0;
        for (int i = 0; i < a.length; i++) {
            for (int j = i; j < a.length; j++) {
                long sum = 0; // Use long type for sum to handle large values
                for (int p = i; p <= j; p++) {
                    sum += a[p]; // Accumulate sum for subarray [i, j]
                }
                if (sum == k) {
                    len = Math.max(len, j - i + 1);
                }
            }
        }
        return len;
    }
}


//approach 2 optimal 




public class Solution {
    public static int longestSubarrayWithSumK(int []arr, long k) {
        // Write your code here

        int left=0;
        int right=0;
        int sum=arr[0];
        int maxLen=0;
        int n=arr.length-1;

        while(right<n)
        {
          
            while(left<=right && sum>k)
            {
                sum-=arr[left];
                left++;
            }
    if(sum==k)
    {
        maxLen=Math.max(maxLen,right-left+1);
    }

            right++;
            if(right<n)
            sum+=arr[right];

        }
return maxLen;
    }
}
