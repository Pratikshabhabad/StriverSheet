//apprroach 1

import java.util.ArrayList;
public class Solution
{
    public static int singleNonDuplicate(ArrayList<Integer> arr)
    {
        //    Write your code here.
        int ans=0;
        for(int i=0;i<arr.size();i++)
        {
            ans^=arr.get(i);
        }

        return ans;
    }
}


//by binary Search

import java.util.ArrayList;
public class Solution
{
    public static int singleNonDuplicate(ArrayList<Integer> arr)
 {
        int n = arr.size();
        int st = 0; // starting index
        int end = n - 1; // ending index

        // Base cases
        if (n == 1) {
            return arr.get(0);
        }
        if (!arr.get(0).equals(arr.get(1))) {
            return arr.get(0);
        }
        if (!arr.get(n - 1).equals(arr.get(n - 2))) {
            return arr.get(n - 1);
        }

        while (st <= end) {
            int mid = st + (end - st) / 2; // calculate middle index

            if (!arr.get(mid).equals(arr.get(mid + 1)) && !arr.get(mid).equals(arr.get(mid - 1))) {
                return arr.get(mid);
            }

            if ((mid % 2 == 1 && arr.get(mid).equals(arr.get(mid - 1))) ||
                    (mid % 2 == 0 && arr.get(mid).equals(arr.get(mid + 1)))) {
                st = mid + 1; 
            } else {
                end = mid - 1; 
            }
        }
        return -1; 
    }
}
